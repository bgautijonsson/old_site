{
  "hash": "1147c4a4a99a60360eda9c639181a2b0",
  "result": {
    "markdown": "---\ntitle: \"Forest Plots with Built-In Tables\"\nsubtitle: \"Creating forest plots with coefficient tables in ggplot2 with cowplot\"\ndescription: |\n    I've seen this kind of figure poking around, but I didn't really think about them until the other day I was asked about how to make one in R. Here I will walk through making one of these plots using the `ggplot2` and `cowplot` packages.\nauthor: \n    -   name: \"Brynjólfur Gauti Guðrúnar Jónsson\"\n        url: \"https://twitter.com/bgautijonsson\"\n        affiliation: \"Tölfræði, Raunvísindadeild Háskóla Íslands\"\n        affiliation-url: \"https://www.hi.is/tolfraedi_0\"\ndate: \"2022/06/28\"\nformat: \n    html:\n        code-fold: true\n        toc: false\n        page-layout: full\nexecute: \n  echo: true\n  warning: false\neditor: source\ntheme: flatly\ntitle-block-banner: true\nstandalone: true\nself-contained: true\ncategories:\n    - english\n    - R\n    - plots\n    - tutorial\nimage: \"featured.png\"\ntwitter-card:\n    image: \"featured.png\"\n---\n\n\n\n::: {.cell}\n\n:::\n\n\nI've seen this kind of figure poking around, but I didn't really think about them until the other day I was asked about how to make one in R. Here I will walk through making one of these plots using the `ggplot2` and `cowplot` packages.\n\nTo start with I have some fake data, `d`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd |> \n    kable(format = \"html\") |> \n    kable_styling(full_width = F)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> name </th>\n   <th style=\"text-align:right;\"> mean </th>\n   <th style=\"text-align:right;\"> lower </th>\n   <th style=\"text-align:right;\"> upper </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Covfefe </td>\n   <td style=\"text-align:right;\"> 1.1989430 </td>\n   <td style=\"text-align:right;\"> 1.0707825 </td>\n   <td style=\"text-align:right;\"> 1.358700 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Coffee </td>\n   <td style=\"text-align:right;\"> 1.8509518 </td>\n   <td style=\"text-align:right;\"> 1.5589701 </td>\n   <td style=\"text-align:right;\"> 2.227752 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Variable </td>\n   <td style=\"text-align:right;\"> 1.2181512 </td>\n   <td style=\"text-align:right;\"> 1.0834045 </td>\n   <td style=\"text-align:right;\"> 1.411683 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Covariate </td>\n   <td style=\"text-align:right;\"> 1.1970336 </td>\n   <td style=\"text-align:right;\"> 1.0699671 </td>\n   <td style=\"text-align:right;\"> 1.342737 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Predictor </td>\n   <td style=\"text-align:right;\"> 0.9085823 </td>\n   <td style=\"text-align:right;\"> 0.8049225 </td>\n   <td style=\"text-align:right;\"> 1.000000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Smoking </td>\n   <td style=\"text-align:right;\"> 0.8770238 </td>\n   <td style=\"text-align:right;\"> 0.7447709 </td>\n   <td style=\"text-align:right;\"> 1.000000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Age </td>\n   <td style=\"text-align:right;\"> 0.9344551 </td>\n   <td style=\"text-align:right;\"> 0.8305984 </td>\n   <td style=\"text-align:right;\"> 1.000000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Uranium </td>\n   <td style=\"text-align:right;\"> 0.9177338 </td>\n   <td style=\"text-align:right;\"> 0.8021060 </td>\n   <td style=\"text-align:right;\"> 1.000000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Stuff </td>\n   <td style=\"text-align:right;\"> 1.0760010 </td>\n   <td style=\"text-align:right;\"> 1.0000000 </td>\n   <td style=\"text-align:right;\"> 1.216474 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Thing </td>\n   <td style=\"text-align:right;\"> 0.9143605 </td>\n   <td style=\"text-align:right;\"> 0.7753231 </td>\n   <td style=\"text-align:right;\"> 1.000000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Koffing </td>\n   <td style=\"text-align:right;\"> 1.0686924 </td>\n   <td style=\"text-align:right;\"> 1.0000000 </td>\n   <td style=\"text-align:right;\"> 1.178642 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Coughing </td>\n   <td style=\"text-align:right;\"> 1.0648236 </td>\n   <td style=\"text-align:right;\"> 1.0000000 </td>\n   <td style=\"text-align:right;\"> 1.194998 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Polvo </td>\n   <td style=\"text-align:right;\"> 0.9227277 </td>\n   <td style=\"text-align:right;\"> 0.8097846 </td>\n   <td style=\"text-align:right;\"> 1.000000 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n### The Forest Plot\n\nThe forest plot itself is not hard to do. Notice how I create this striped pattern with ` geom_vline(aes(xintercept = name), col = \"grey95\", size = 5)`. I'll do the same thing to the table part of the figure later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- d |> \n    mutate(name = fct_reorder(name, mean)) |> \n    ggplot(aes(x = name, y = mean,\n                  ymin = lower, ymax = upper)) +\n    geom_vline(aes(xintercept = name), col = \"grey95\", size = 5) +\n    geom_hline(yintercept = 1, lty = 2) +\n    geom_point() +\n    geom_linerange() +\n    coord_flip() +\n    labs(x = NULL, y = NULL) +\n    theme(plot.margin = margin(t = 5, r = -4, b = 5, l = 5))\n\np1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=100%}\n:::\n:::\n\n\n### The Table\n\nTo make the table look nice I convert the numbers to text and clean them up so that the text is justified nicely when plotting it. I did some manual tuning of the margins to make the plot and table line up nicely. \n\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- d |> \n    mutate(name = fct_reorder(name, mean),\n           mean = round(mean, 2),\n           mean = str_pad(mean, width = 4, side = \"right\", pad = \"0\"),\n           lower = round(lower, 2),\n           lower = as.character(lower),\n           lower = ifelse(lower == \"1\", \"1.00\", lower),\n           lower = str_pad(lower, width = 4, side = \"right\", pad = \"0\"),\n           upper = round(upper, 2),\n           upper = as.character(upper),\n           upper = ifelse(upper == \"1\", \"1.00\", upper),\n           upper = str_pad(upper, width = 4, side = \"right\", pad = \"0\"),\n           ci = str_c(lower, \", \", upper)) |> \n    ggplot(aes(x = name)) +\n    geom_vline(aes(xintercept = name), col = \"grey95\", size = 5) +\n    geom_text(aes(label = mean, y = 1)) +\n    geom_text(aes(label = ci, y = 1.07)) +\n    coord_flip(ylim = c(0.99, 1.1)) +\n    theme(axis.title = element_blank(),\n          axis.text = element_blank(),\n          axis.ticks = element_blank(),\n          axis.line.y = element_blank(),\n          panel.border = element_blank(), \n          panel.grid = element_blank(), \n          plot.background = element_blank(),\n          plot.margin = margin(t = 5, r = 5, b = 19.3, l = 0))\n\np2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=100%}\n:::\n:::\n\n\n#### The finished bottom row\n\nNow we have alligned the plot and table. If you zoom in you might see that they don't line up perfectly. I am not liable for any bodily harm caused by this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbottom_row <- plot_grid(p1, p2, nrow = 1, rel_widths = c(1, 0.3)) \n\nbottom_row\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=100%}\n:::\n:::\n\n\n### The headers\n\nI admit that this is a pretty handwavy manual way to make the header fit, and there is probably a nice way to automatically fit this using the coordinate system. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_row <- ggplot(data = tibble()) +\n    geom_text(aes(y = 1, x = 0.02, label = \"Variable\"), size = 5) +\n    geom_text(aes(y = 1, x = 0.84, label = \"Mean\"), size = 5) +\n    geom_text(aes(y = 1, x = 0.98, label = \"95% CI\"), size = 5) +\n    coord_cartesian(xlim = c(0, 1)) +\n    theme_void() +\n    theme(plot.margin = margin(t = 0, r = 5, b = 0, l = 5),\n          axis.line.x.bottom = element_line())\n\n\ntop_row\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=100%}\n:::\n:::\n\n\n\n### Putting it all together\n\nAnd so we come to the finished plot. If we wrangle the `rel_heights` setting a little bit we can get a pretty nice looking forest plot and table hybrid.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_grid(top_row, bottom_row, ncol = 1, rel_heights = c(0.07, 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/finished_plot-1.png){width=100%}\n:::\n:::\n\n\nThis was actually less of an inconvenience than I thought. The mixture of `ggplot2` and `cowplot` made this a pretty easy task.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}